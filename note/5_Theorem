# 筆記方向 ===================================================================================
1. 查演算法的各種使用時機
2. 附圖解
3. pseudo code
4. 簡單文字描述
5. Big O
6. 找機會轉成 Markdown

# Master Theorem ===========================================================================
; http://courses.csail.mit.edu/6.046/spring04/handouts/akrabazzi.pdf  <--  論文
; https://www.gushiciku.cn/pl/gbAq/zh-tw  <--  vs Akra-Bazzi Theorem
"大師定理: 一開始覺得是無敵的定理, 但後來不是無敵"
"將遞迴關係式換成 Big O 的方法"  <--  "只用在 Divide-and-Conquer recursion （Ｑ？）"
"T(n)  -->  O()"

    ; ↓ ↓ ↓ ex. 遞迴關係式 -----------------------------------------
    Merge Sort
        遞迴關係式: T(n) = 2 T(n/2) + n
        Big O: O(nlogn)

          [o]    [o]    [o]    [o]    sort   <--  T(1) = 0
            \    /         \   /      merge  <--  n/2
             [oo]           [oo]      sort   <--  T(n/2)
                 \         /          merge  <--  n
                   [oooo]             sort   <--  T(n) = 2 T(n/2) + n

            T(4) = 2 T(2) + 4
                = 2 (2 T(1) + 2) +4
                = 8

            O(4log4) = 8

    ; ↑ ↑ ↑ ex. 遞迴關係式 -----------------------------------------
            ＊ 註: subproblem: "圖中每個分裂的子 array"


    
    T(n) = a*T(n/b) + c*n^k
    a: "subproblems 數量" , n/b: "每個 subproblem 大小" , f(n): "cost of combining subproblems"

    ; 參考圖 image/5_Theorem/Master Theorem/Master Theorem.jpg
    ; ↓ ↓ ↓ Master Theorem ---------------------------------------------
    ; T(n) = a*T(n/b) + c*n^k
    ; T(1) = c
    ; a, b, c, k 為常數
    ; -----------------
    ; T(n) ∈ Θ(n^k)         <-- if a < b^k
    ; T(n) ∈ Θ(n^k * logn)  <-- if a = b^k
    ; T(n) ∈ Θ(n^logb(a))   <-- if a > b^k
    ; ↑ ↑ ↑ Master Theorem ---------------------------------------------


