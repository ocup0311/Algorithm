# Counter ===================================================================================================

    # code practice:
    ＊ Same Frequency
    "Write a function that takes two strings and check if they have the same letters.Order doesn't matter."
        by loop O(n)

    ＊ intersection
    "Write a function that takes two arrays as parameters, and then return an array that is the intersection of these two arrays."
        by loop O(n^2)
        by counter O(n)

    ＊ Average Pair
    "Write a function that given a sorted array of integers and a number. Find if there's any pair in the array that has average of the given number. Find all of them. There might be multiple pairs fit the condition."
        by loop O(n^2)
        by counter O(n)
        by pointer O(n) (need sorted)



# Pointer ===================================================================================================

    # code practice:
    ＊ Palindrome
    "Write a function that checks if the input string is a palindrome. Palindrome is a word that can be read forwards and backwards."
        by pointer O(n)

    ＊ Subsequence promblem
    "A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. Write a function that checks if one string is a subsequence of the other string."
        by pointer O(n)



# Sliding Window ============================================================================================
"Generally speaking, a sliding window is a sub-list that runs over an underlying collection."
input:
    array: [a, b, c, d, e, f, g] (也可是動態 array)
    size: 3

output:
    [a, b, c]
       [b, c, d]
          [c, d, e]
             [d, e, f]
                [e, f, g]


    # code practice:
    ＊ Max and Min Sum
    "Write two functions that calculate the max and min sum of n consecutive numbers in an array."
        by pass whole set O(n * size)
        by pass terminal O(n)

    ＊ minSubLength
    "Write a function called minSubLength which accepts two parameters, an array of positive integers and a positive integer. This function should return the minimal length of a continuous subarray - the sum of elements inside this subarray has to be greater than or equal to the positive integer parameter. If subarray not found, then return 0."
        by use maxSum O(n ^ 2)
        by pointer O(n) (每項必須為自然數)

    ＊ unique letters string
    "Write a function called uniqueLettersString, which accepts a string and returns the length of the longest substring with all distinct characters."
        by 1 pointer O(n)
        by 3 pointer O(n)

    ＊ largest product（乘積）
    "The four adjacent digits in the 1000-digit number that have the greatest product are 9x9x8x9=5832. Find the n adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?"
        by pass whole set O(n * size)
        by pass terminal O(n)


# Recursion =================================================================================================
"A function that calls itself."
"Recursion is using a data structure called 'stack'. When we are calling a function inside another function, we are on the call stack."
"Recursion is also a mathematical relation in sequences."

    # pseudo code:
        recursion(n):
            if n equal 1:
                return A1
            else:
                return recursion(n-1)

    # Big O: call x times rs() inside itslef
    ; https://stackoverflow.com/questions/13467674/determining-complexity-for-recursive-functions-big-o-notation
        rs: recursive(n-1) x: 1 --> O(n)
        rs: recursive(n-5) x: 1 --> O(n/5)
        rs: recursive(n/5) x: 1 --> O(log(n)) --base 5
        rs: recursive(n-1) x: 2 --> O(2^n) (exponential)

    # code practice:
        ＊ Recursion Sequence
            O(n)

        ＊ Fibonacci Sequence
        "Write a function that takes an integer N as an input and returns the Nth number in Fibonacci Sequence."
            withoutStore O(2^n)
            withStore O(n) (此為 Dynamic Programming 概念)

        ＊ Array of Arrays
        "Write a function that collects all value in an array of arrays and return an array of values collected."
            O(n)


# Greedy Methods ============================================================================================
"Each step of a 'greedy' algorithm only considers what seems best at the moment, rather than looking at the data as a whole."
"They still arrive at globally-optimal solutions."
"只考慮當下最佳選擇 --> 整體最佳選擇"   <-- "哪些條件下可用 （Ｑ？）"

    # code practice:
        ＊ Huffman Coding

        ＊ Minimal Spanning Tree

        ＊ Dijkstra’s
            ; https://stackoverflow.com/questions/14038011/dijkstras-algorithm-a-greedy-or-dynamic-programming-algorithm
        
        ＊ Fractional Knapsack Problem (背包問題)    <-- 可以是分數


# Dynamic Programming =======================================================================================

    # 特性:
        - 全方面的策略
        - 分解成許多子問題，全部解決後才得到答案
        - 避免重複的動作
        - 不斷改變、紀錄某些細節

    # 使用時機:
        -  有許多重複問題時

    # code practice:
        ＊ Longest Common Subsequence (LCS) 
        ; 參考圖 image/3_Skills/Dynamic Programming/LCS.jpg
        "ex. 比較兩條 ssDNA 的相似度"

            # 名詞: 
            於兩個 string 中，    ; "ABCDEFG"  &  "ABDEFG"
                連續出現的字母: common substring    (collection of contiguous letters )
                    ; "AB", "DE", "DEFG"...
                順序出現的字母: common subsequence  (collection of letters )
                    ; "AB", "BD", "ABDEFG"...

        ＊ 0/1 Knapsack Problem    <-- 全有全無

        ＊ Multistage Graph (shorted path)
        ; https://www.geeksforgeeks.org/multistage-graph-shortest-path/
            stage 0: 起點
            stage 1: 與起點相隔一個 edge


# Brute-force (暴力破解)

# Backtracking (回朔法)
    "一種暴力破解法(Brute-force attack), 暴力破解時, 記錄下排除掉的候選人, 再次遇到時就直接略過他, 回朔到上一步繼續處理其他候選人。"
    
    # code practice:
        ＊ permutation_3item

        ＊ N Queens Puzzle

# Branch-and-Bound (分支定界)
"以二元樹分支 (選取與否 0/1 ), 不斷找出上下界線, 排除低於下界線的分支, 優先處理最高上界的分支"

    # code practice:
        ＊ 0/1 Knapsack Problem
            # 解析 ------------------------------------------------
            item of input:{
                cost: "物品所需花費 (重量)"
                profit: "物品利潤 (performance)"
                cp: "profit / cost"
            }

            global:{
                maxCost: "背包最大承重, 最大可承受花費 (limit)"
                lowerBound_tree: "目前整棵樹的 lowerBound"
            }

            node of tree:{
                cost: "此 Branch 已確定 cost"
                profit: "此 Branch 已確定 profit"
                lowerBound: "以 cp 排序選取, 取得 < maxCost 的 profit"
                upperBound: "以 Fractional Knapsack Problem 計算"
            }

            1. 優先尋找最高 maxProfit node 的 Branch 
            2. 若 upperBound < lowerBound_tree  --> 排除此 Branch
            3. 若 cost > maxCost                --> 排除此 Branch
            # 解析 ------------------------------------------------



# Knuth-Morris-Pratt String-Search (KMP)
"跳著尋找文字"

    ; ex. ---------------------------------------------
    ; Data pool: ABCDABCDABCDABCH
    ; Target: ABCDABCH
    ; 
    ;           ABCDABCDABCDABCH
    ;           ABCDABCH
    ;        -->    ABCDABCH
    ;        -->        ABCDABCH
    ; ex. ---------------------------------------------

    
    # PS Array (Prefix String Array?)
        ex. "ABCDABCH" --> "[-1,0,0,0,1,2,3]"
        
        1. 初始化兩個 pointer 1, 2 為 0, 1 用以指向一字串
        2. "str[ptr1] !== str[ptr2]"  --> "PS[ptr2] = 0" , "ptr1 = 0" , "ptr2++"
           "str[ptr1] === str[ptr2]"  --> "PS[ptr2] = ptr1 + 1" , "ptr1++" , "ptr2++"
        3. PS 全部右移一位, PS[0] 補上 -1

    # 步驟
        1. 先求得 target 的 PS Array
        2. 以兩個 pointer 1 ,2 分別來比對 target(T) & data pool(D)
        3. "T[ptr1] !== D[ptr2]" --> "ptr2 = ptr2 - PS[ptr1]" , "ptr1 = 0"
        4. 重複直到全部找完 或 找到全符合








