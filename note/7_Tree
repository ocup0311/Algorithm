# tree =====================================================================================
"tree is acyclic graph"

    # 定義:
    no loop graph
    one and only one root

    # 應用例子:
    DOM, File System in OS, AI ...

    # 名詞:   

    node: "節點"

    edge: "相連的線"

    root: "最上一個 node"

    parent: "向上相連的 node"

    children: "向下相連的 node"

    leaf: "沒有 child 的 node"

    layer: "root = 1"

    subtree: "每個 node 與他的所有 children 形成一個 tree, 都是他所屬那棵樹的 subtree"

    Binary Tree: "所有 node 最多兩個 children"
    
    Complete Binary Tree: "只有最右邊最底部為空"
    
    Full Binary Tree(FBT): "所有的葉子有一樣的 depth"
    
    Max Heap Tree: "Complete + 所有 subtree, root 必為最大值 -(左右沒差)"

# Binary Search Tree (BST) ===================================================================

範例:
              A                 <-- layer = 1 -->                56
          /        \                                         /        \            
      B               C         <-- layer = 2 -->         32             78
    /   \           /   \                               /   \           /   \       
  D       E       F       G     <-- layer = 3 -->     3      52       67     87
 / \     / \     / \     / \                         / \     / \     / \     / \
H   I   J   K   L   M   N   O   <-- layer = 4 -->   1  5    47 55   53 72   79  99

    # 定義:
        最多兩個 children
        left < root < right

    # e.g. 需求: 未知數量隨意新增資料後查詢
        array       --> 不斷擴容, O(n)
        linked list --> O(n)
        hashtable   --> O(1), 但未知數量無法確保達到 O(1)

    # Traversal
        Breadth First Tree Traversal (BFT) (廣度優先)
        "Level Order Tree Traversal"
            從最上面開始一層一層往下, 由左往右
            ; [56,32,78,3,52,67,87,1,5,47,55,53,72,79,99]

        Depth First Tree Traversal   (DFT) (深度優先)
            分三種, 由左往右。 名稱對應 root 位置。
            PreOrder "root -> left -> right"
            ; [56,32,3,1,5,52,47,55,78,67,53,72,87,79,99]
            InOrder "left -> root -> right"
            ; [1,3,5,32,47,52,55,56,53,67,72,78,79,87,99]
            PostOrder "left -> right -> root"
            ; [1,5,3,47,55,52,32,53,72,67,79,99,87,78,56]

    # Big O
        worst case performance: O(n)    <-- unbalanced
        best case performance: O(1)
        average performance: O(logn)    <-- balanced

# 衍生 ========================================================================================
    # Priority Queue (PQ) -------------------------------
        實作方法: linked list, Queue, array, Max Heap...

            Max Heap
                enqueue O(logn)
                dequeue O(logn)
            linked list, array
                enqueue O(n)
                dequeue O(1) or O(n)


    # Huffman Coding ------------------------------------
    ; https://huffman.ooz.ie/
    ; Encoding Theory: Lossy  Compression & Lossless  Compression (無失真)
    "Huffman -- Lossless  Compression"
    "出現越多次的字, 用越少的 bit 來儲存"
    "不同檔案的 Huffman Tree 不同, 所以還需要存 tree"

        # Huffman Tree 
            1. 一開始將每個 node 當成只有 root 的 tree
            2. 將 root 最小的兩個 tree 合併, 其兩個 root 相加, 新的數當作合併後新的 root
            3. 其較小的為 left child, 較大的為 right child
            4. 重複 step 2,3 將所有 tree 合併

        # Huffman code 
            1. 為 Huffman Tree 所有 edges 編號, left:0 right:1
            2. 從 root 開始走到每個 leaf, 每個 edge 組合形成的編碼為該 leaf 的 Huffman code
        
        # Compress 
            1. 讀取資料, 計算每個單位(字)出現的頻率
            2. 按照頻率排序
            3. 以 頻率 建立 Huffman Tree    <-- 可用 Priority Queue
            4. 產生 Huffman codes
            5. 讀取資料, 將其按照 Huffman codes 編碼 (也需紀錄 Huffman codes 對照表)

        # Decompress 
            1. 讀取編碼, 按照 Huffman codes 轉回原本的編碼 (8 bits)
            2. 再將 8 bits 轉為人類讀取的檔案

