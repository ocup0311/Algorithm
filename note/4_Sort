# Sorting ==================================================================================
; https://blog.kennycoder.io/2020/04/16/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E8%88%87%E6%BC%94%E7%AE%97%E6%B3%95%E7%AD%86%E8%A8%98-Sort-%E6%8E%92%E5%BA%8F-%E4%BB%8B%E7%B4%B9/
; http://notepad.yehyeh.net/Content/Algorithm/Sort/Sort.php
; "V8 js.sort: Timsort = Insertion +  Merge"    <-- https://v8.dev/blog/array-sort

    1. Internal vs External
        是否資料量小, 可一次全部載入記憶體中做排序? 無需借助外部儲存體, 再分段讀入做排序?
        可以, 不需 --> External
        不可, 需要 --> Internal

        ; e.g. -----------------------------
        ; Internal --> Bubble, Insertion, Quick, Heap, Radix, Selection, ...
        ; External --> Merge (利用 Selection Tree 結構輔助), M-way Search Tree, B Tree, ...
        ; e.g. -----------------------------

    2. Stable vs Unstable
        重複的相同 value, 是否排序前後, 順序不變?
        不變 --> Stable
        會變 --> Unstable

        ; ex. -----------------------------
        ; [5, 7, 3, 3*, 2, 9]
        ; Stable --> [2, 3, 3*, 5, 7, 9]
        ; Unstable --> [2, 3*, 3, 5, 7, 9]
        ; ex. -----------------------------

        ; e.g. -----------------------------
        ; Stable --> Merge
        ; Unstable --> Quick, Heap
        ; e.g. -----------------------------

    3. 初等排序 vs 高等排序
        排序效率
        O(n^2) --> 初等
        O(nlogn) --> 高等

        ; e.g. -----------------------------
        ; 初等 --> Bubble, Insertion, Selection
        ; 高等 --> Merge, Quick, Heap
        ; e.g. -----------------------------

    4. Comparison vs Linear-Time
        是否需有其他條件限制? 因而突破時間複雜度的 Lower_bound    <--- （Ｑ？）
        不需 --> Comparison     Lower_bound O(nlogn)
        需要 --> Linear-Time    O(n)  <-- 每一種都是（Ｑ？）

        ; e.g. -----------------------------
        ; Comparison --> Bubble, Insertion, Selection, Merge, Quick, Heap
        ; Linear-Time --> Counting, Radix
        ; e.g. -----------------------------




# Comparison Sorting =======================================================================

    ; ↓ ↓ ↓ not so efficient O(n^2)---------------------------------------------
    ; Bubble, Insertion, Selection, Shell, Shaker
    ＊Bubble Sort O(n^2)
    "Bubble sort compares adjacent elements and swaps them if they are in the wrong order."
    "目前幾乎沒地方在使用。"
    "兩兩互比, 小的左移"
    "[3,7,4,1,9,2] --> [3,7,4,1,2,9] --> [3,7,1,4,2,9] --> [3,1,7,4,2,9] --> [1,3,7,4,2,9] --> [1,3,7,2,4,9] --> [1,3,2,7,4,9] --> [1,2,3,7,4,9] --> [1,2,3,4,7,9]"
        worst case performance: O(n^2)
        best case performance: O(n^2) -- with break point --> O(n)
        average performance: O(n^2)

    ＊Insertion Sort 
    "Keeping inserting a new value into a sorted array. Insert it to the correct spot sot the sorted array remains sorted."
    "效率比 Bubble Sort 略好"
    "照順序一個個, 往左比過去, 一個數一次比到位"
    "[3,7,4,1,9,2] --> [3,7,4,1,9,2] --> [3,4,7,1,9,2] --> [3,4,1,7,9,2] --> [3,1,4,7,9,2] --> [1,3,4,7,9,2] --> [1,3,4,7,9,2] --> [1,3,4,7,2,9] --> [1,3,4,2,7,9] --> [1,3,2,4,7,9] --> [1,2,3,4,7,9]"
        worst case performance: O(n^2)
        best case performance: O(n)
        average performance: O(n^2)    

    ＊Selection Sort
    "The principle of selection sort is - select the smallest value in unsorted array, and then swap it with the left most value in this unsorted array."
    "找到最小值, 移去最左邊"
        worst case performance: O(n^2)
        best case performance: O(n^2)
        average performance: O(n^2)    

    ; ↑ ↑ ↑ not so efficient O(n^2)---------------------------------------------

    ; ↓ ↓ ↓ Comparison Model 中, 目前最快排列 O(nlogn) ----------------------------------------
    ; Merge, Quick, Heap
    ＊Merge Sort
    "Take advantage of the fact that combining two sorted arrays has O(n) time complexity, using the pointer skill."
    "divide and conquer (分而治之)" --> 通常會跟 recursion 併用
    "空間複雜度較高 <-- 需一直建立 array"
    "[3,7,4,1,9,2] --> [3],[7],[4],[1],[9],[2] --> [3,7],[1,4],[2,9] --> [1,3,4,7],[2,9] --> [1,2,3,4,7,9]"

        # Big O
        切片 --> O(nlogn)
        每層合併為 O(n) 共 logn(base2) 層 --> O(nlogn)      +
        ---------------------------------------------------
        O(nlogn) + O(nlogn) ==> O(nlogn)       

        ; --------------------------------------------
        ; 原本想說直接一次切完, 再 merge: 
        ; 切片為 O(n),  合併為 O(nlogn)
        ; => O(n) + O(nlogn) =>  O(nlogn)
        ; 
        ; 實際寫之後, 覺得這樣不太可行 & 差別不大, 直接跟著 recursion 即可, 變成: 
        ; 切片為 O(nlogn),  合併為 O(nlogn)
        ; => O(nlogn) + O(nlogn) =>  O(nlogn)
        ; 最後還是 O(nlogn)
        ; ---------------------------------------------
        
        worst case performance: O(nlogn)
        best case performance: O(nlogn)
        average performance: O(nlogn)

    ＊Heap Sort
    "array --> Complete Binary Tree --> Max Heap Tree --> array"
        
        # 步驟
        ; ---------------------------------------------
        ; 1. 從最底層開始把大的往上換
        ; 2. 當上層有換過時, 需再次檢查他的下層, 直到底層
        ; 3. root 與 last 互換, HeapSize - 1
        ; 4. 重複 2 & 3 直到 HeapSize 歸零
        ; ---------------------------------------------


        # Big O
        ; 參考圖 image/4_Sort/heapSort/makeMaxHeapTree.jpg
        建樹 --> O(n)
        排列 --> O(nlogn)   +
        ----------------------------
        O(n) + O(nlogn) ==> O(nlogn)

        worst case performance: O(nlogn)
        best case performance: O(nlogn) [or O(n)  <--  [1,1,1,1,1]]
        average performance: O(nlogn)

    ＊Quick Sort
    ; https://kopu.chat/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-quick-sort/
    ; ↑ ↑ ↑ 再研究解決 worst case 的方法。
    
        Partition
        "The idea of partition algorithm is to divide the array into 2 parts. Either part is a sorted array, but the element in the middle is sorted(we found its correct final spot)"
        "把 last 當作 pivot --> 比 pivot 小的右移到小區, 如右示意 (小區-大區-pivot) --> 最後把大區第一個跟 pivot 交換 (小區-pivot-大區)"
        "[3,7,2,1,9,4] --> [3,7,2,1,9,4] --> [3,2,7,1,9,4] --> [3,2,1,7,9,4] --> [3,2,1,7,9,4] --> [3,2,1,4,9,7]"
            ==> [3,2,1,4,9,7] ==> 如上跑一輪後只有 4 的位置排好
        
        # 步驟
        ; ---------------------------------------------
        ; 1. 不斷對每個 part 做 Partition
        ; ---------------------------------------------

        worst case performance: O(n^2)
        best case performance: O(nlogn)
        average performance: O(nlogn)

        與 Merge Sort, Heap Sort 比較:
            優勢:
                因為過程中省去建立許多 array, 空間複雜度相對小很多（Ｑ？）
                省去建立 array 所花費時間, 在一般的情況下, 時間也能較快（Ｑ？）
            劣勢:
                worst case performance: O(n^2)
                worst case 時可能會 stack overflow
        


    ; ↑ ↑ ↑ Comparison Model 中, 目前最快排列 O(nlogn) ---------------------------------------

    ; Lower bounds of comparison sorting is Ω(nlogn) ---------------------------------------
        sorting 得到的結果畫成 Decision Tree, 
        最後所有可能的 leaf 長相如下範例,
        如同將所有 item 做排列(permutation),
        --> 總共有 n! 個 leaf 
        --> log(n!)
        --> Ω(nlogn), O(nlongn)

        A[0] ≤ A[5] ≤ A[4] ≤ A[2] ≤ A[1] ≤ A[3]  
         6      5      4      3      2      1       <-- 排列可能數量
         n  +  n-1   +   ...     ...     +  1       <-- n!
   



# Linear Time Sorting ======================================================================

; https://stackoverflow.com/questions/749585/sorting-in-linear-time
; http://ind.ntou.edu.tw/~litsnow/al98/pdf/Algorithm-Ch8-Sorting-in-Linear-Time.pdf
; https://www.csie.ntu.edu.tw/~hsinmu/courses/_media/dsa_17spring/sorting_linear.pdf
O(n)

"Pigeonhole sort, Counting sort, Radix sort, Bucket sort"
"通常以空間換取時間"
"講者: 因為 linear time sorting 還是研究中的領域, 研究者使用 Big Theta 來分析, 所以解釋時才一直用 Big Theta。 <-- （Ｑ？）"

    This is a time space trade off.
    ; ---------------------------------------------------
    ; Comparason sort takes little or no ram and runs in O(nlogn) time. 
    ; Radix sort (for example) runs in O(n) time AND O(log(radix)) memory.
    ; ---------------------------------------------------

    ＊Counting Sort  -->  O(n+K)
        限制:
            1. 需為整數
            2. 已知 input 項目, 所有的種類範圍 (ex. 3 ~ 8)
            3. 種類數 K, 必須 K = O(n)
        步驟:
          Stable
            1. 建立已排序種類別 array            --->   O(K)
            2. 將欲排列的 array 數一遍           --->   O(n) 
            3. counter 從 1st 往後累加          --->   O(K)    <-- (CMF)Cumulative Mass Function
            4. input 從 last 往前放入 sorted    --->   O(n)
                (參考 counter 放入對應 index)
            5. 對應 counter -1                 --->   O(1)
            6. 重複 4 & 5 直到全部排入           --->   O(n)
            ; ex. --------------------------------------------- 
            ; range = [0, 1, 2, 3, 4, 5]
            ; input = [5, 3, 2, 4, 1, 3, 0, 2, 2, 4, 5]
                       1  2  3  4  5  6  7  8  9 10 11
            ; 
            ;  --> counter = [1, 1, 3, 2, 2, 2]     (1個0,1個1...)
                              0  1  2  3  4  5
            ; 
            ;  --> counter = [1, 2, 5, 7, 9, 11]    (≤ 5 有 11 個...)
                              0  1  2  3  4  5
            ; 
            ;  --> input =  [5, 3, 2, 4, 1, 3, 0, 2, 2, 4, -]
                             1  2  3  4  5  6  7  8  9 10 11
            ;      sorted = [-, -, -, -, -, -, -, -, -, -, 5]
                             1  2  3  4  5  6  7  8  9 10 11
            ;      counter = [1, 2, 5, 7, 9, 10]    
                              0  1  2  3  4  5
            ; 
            ;  --> input =  [5, 3, 2, 4, 1, 3, 0, 2, 2, -, -]
                             1  2  3  4  5  6  7  8  9 10 11
            ;      sorted = [-, -, -, -, -, -, -, -, 4, -, 5]
                             1  2  3  4  5  6  7  8  9 10 11
            ;      counter = [1, 2, 5, 7, 8, 10]    (≤ 4 剩 8 個...)
                              0  1  2  3  4  5
            ; 
            ;                     ...  ... ...
            ; 
            ;  --> sorted = [0, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5]
            ; ex. --------------------------------------------- 

          Unstable
            1. 建立已排序種類別 array            --->   O(K)
            2. 將欲排列的 array 數一遍           --->   O(n) 
            3. 將每個種類按順序輸出上述數出的數量   --->   O(n+K)
            ; ex. --------------------------------------------- 
            ; range = [3,4,5,6,7,8]
            ; input = [8,6,5,7,4,6,3,5,5,7,8]
            ;  --> count = [1,1,3,2,2,2]     (1個3,1個4...)
            ;  --> sorted = [3,4,5,5,5,6,6,7,7,8,8]
            ; ex. --------------------------------------------- 

    ＊Radix Sort  -->  O(n * c)
        
        d: "digits(位數)" , n: "資料量" , b: "base of log" , S: "最大數" , logb(S): "logS of base b"
        ; proof ---------------------------------------------
        
        ; 使用 Counting Sort O(n+K), 則時間複雜度為:
        ; Θ(d(n+K))
        
        ; 選擇 base b, 所有的位數在 0 ~ b-1 帶入
        ; --->  O(d(n+b))

        ; d = logb(S) 帶入
        ; --->  O(logb(S) * (n+b))
        
        ; b 越小 d 越大, 需取得平衡
        ; if b = Θ(n) 時, logb(S) * (n+b) 會有最小值
        ; --->  O(n * logn(S))

        ; if S ≤ n^c
        ; --->  O(n * c)
        ; proof ---------------------------------------------

        限制:
            1. 需為整數
            2. 使用 stable sort 來進行 (使用 Counting Sort)
            3. base 的選擇
            4. ∃ S ≤ n^c --> c ≤ 1 (不確定, 如何訂立此部分限制 （Ｑ？）)
        步驟:
            1. 選擇 base b, 使 b & d 達到平衡 (經驗上選擇 b = Θ(n))
            2. 需將所有 input 換算成 b 進位 （Ｑ？）
            3. 依序參照 1st, 2nd, ..., bth 位數, 對 input 做 stable sort

# 整理表格 ===================================================================================
; https://en.wikipedia.org/wiki/Sorting_algorithm#Comparison_sorts  <-- see more

        Algorithm       Best       Worst       Avg           空間        stable       
        -------------------------------------------------------------------------
        Bubble          O(n)       O(n^2)     O(n^2)         O(1)        stable
        Insertion       O(n)       O(n^2)     O(n^2)         O(1)        stable
        Selection      O(n^2)      O(n^2)     O(n^2)         O(1)       Unstable
        Merge         O(nlogn)    O(nlogn)   O(nlogn)        O(n)        stable
        Heap          O(nlogn)    O(nlogn)   O(nlogn)     O(n)+O(1)     Unstable
        Quick         O(nlogn)     O(n^2)    O(nlogn)    O(logn)~O(n)   Unstable
        Counting       O(n+K)      O(n+K)     O(n+K)        O(n+K)       stable
        Radix

; ＊stable 的再回去檢查 code 是否有保持 stable。  
; 再研究 Quick, Counting 空間。  
; Radix。   
; 再研究 Quick 解決 worst case 法。
