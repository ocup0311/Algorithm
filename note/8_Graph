# Graph ======================================================================================
    
    # 定義:
    Abstract
    有限的 vertices
    可有或無方向性

    # 名詞:
        vertices (nodes, points)
        edges (links, lines)

    # Traversal:
        Breadth First Tree Traversal (BFT) (廣度優先)

        Depth First Tree Traversal   (DFT) (深度優先)
        


    # ex. ------------------------------------------------------------------
    Graph: [(A,E) (A,F) (B,D) (C,D) (D,E) (D,I) (E,F) (E,I) (F,I) 
    (G,H) (G,I) (H,I) (H,L) (I,J) (I,K) (I,M) (J, M) (K,L) (K,M)]
    此例中, 從 A 開始, 以字母順序當標準。
    
    BFT: A -> E -> F -> D -> I -> B -> C -> G -> H -> J -> K -> M -> L
    DFT: A -> E -> D -> B -> C -> I -> F -> G -> H -> L -> K -> M -> J
    # ex. ------------------------------------------------------------------


    # 最短路徑:
    ; 參考圖 image/8_Graph/shortedPath
        Floyd-Warshall
            "Find all-pairs shortest path in a directed weighted graph with positive and nagative edge weights."
            用以找出所有點到點之間最短距離
            時間 O(n^3)
            空間 O(n^2)

        Dijkstra’s
            ; https://stackoverflow.com/questions/26547816/understanding-time-complexity-calculation-for-dijkstra-algorithm
            "NO nagative edge weights."
            用以找出從一個起始點到其他所有點的最短路徑 (可獲得路線圖)
            O(ElogV)  --> let E = O(VN), then O(VNlogV)

    