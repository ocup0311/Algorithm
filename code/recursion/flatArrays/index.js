//
// input: [0, [[[1, [2], 3]], [4, 5, 6]], [[[[7, [8, 9]]]], 10]]
// output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

import { performance } from 'perf_hooks'
import { builtInput, runTest } from './@test.js'
import flatArrays from './flatArrays/index.js'

const input_prRUN = builtInput(10000)
const input0 = [0, [[[1, [2], 3]], [4, 5, 6]], [[[[7, [8, 9]]]], 10]]
const input1 = builtInput(39)
const input2 = builtInput(10000)
const input3 = builtInput(1000000)
const input4 = builtInput(10000)
const input5 = builtInput(1000000)
const input6 = builtInput(10000)
const input7 = builtInput(1000000)

// warm up
;(() => {
  runTest(input_prRUN, flatArrays)
  input_prRUN.flat(Infinity)
  runTest(input_prRUN, flatArrays)
  input_prRUN.flat(Infinity)
  runTest(input_prRUN, flatArrays)
  input_prRUN.flat(Infinity)
  runTest(input_prRUN, flatArrays)
  input_prRUN.flat(Infinity)
  runTest(input_prRUN, flatArrays)
  input_prRUN.flat(Infinity)
  runTest(input_prRUN, flatArrays)
  input_prRUN.flat(Infinity)
  runTest(input_prRUN, flatArrays)
  input_prRUN.flat(Infinity)
})()

const Mt0s = performance.now()
runTest(input0, flatArrays)
const Mt0e = performance.now()
const Mt1s = performance.now()
runTest(input1, flatArrays)
const Mt1e = performance.now()
const Mt2s = performance.now()
runTest(input2, flatArrays)
const Mt2e = performance.now()
const Mt3s = performance.now()
runTest(input3, flatArrays)
const Mt3e = performance.now()
const Mt4s = performance.now()
runTest(input4, flatArrays)
const Mt4e = performance.now()
const Mt5s = performance.now()
runTest(input5, flatArrays)
const Mt5e = performance.now()
const Mt6s = performance.now()
runTest(input6, flatArrays)
const Mt6e = performance.now()
const Mt7s = performance.now()
runTest(input7, flatArrays)
const Mt7e = performance.now()

const Jt0s = performance.now()
input0.flat(Infinity)
const Jt0e = performance.now()
const Jt1s = performance.now()
input1.flat(Infinity)
const Jt1e = performance.now()
const Jt2s = performance.now()
input2.flat(Infinity)
const Jt2e = performance.now()
const Jt3s = performance.now()
input3.flat(Infinity)
const Jt3e = performance.now()
const Jt4s = performance.now()
input4.flat(Infinity)
const Jt4e = performance.now()
const Jt5s = performance.now()
input5.flat(Infinity)
const Jt5e = performance.now()
const Jt6s = performance.now()
input6.flat(Infinity)
const Jt6e = performance.now()
const Jt7s = performance.now()
input7.flat(Infinity)
const Jt7e = performance.now()

console.log(`me: ${Math.round((Mt0e - Mt0s) * 1000) / 1000} ms`)
console.log(`me: ${Math.round((Mt1e - Mt1s) * 1000) / 1000} ms`)
console.log(`   me: ${Math.round((Mt2e - Mt2s) * 1000) / 1000} ms`)
console.log(`me100: ${Math.round((Mt3e - Mt3s) * 1000) / 1000} ms`)
console.log(`   me: ${Math.round((Mt4e - Mt4s) * 1000) / 1000} ms`)
console.log(`me100: ${Math.round((Mt5e - Mt5s) * 1000) / 1000} ms`)
console.log(`   me: ${Math.round((Mt6e - Mt6s) * 1000) / 1000} ms`)
console.log(`me100: ${Math.round((Mt7e - Mt7s) * 1000) / 1000} ms`)

console.log(` js: ${Math.round((Jt0e - Jt0s) * 1000) / 1000} ms`)
console.log(` js: ${Math.round((Jt1e - Jt1s) * 1000) / 1000} ms`)
console.log(`    js: ${Math.round((Jt2e - Jt2s) * 1000) / 1000} ms`)
console.log(` js100: ${Math.round((Jt3e - Jt3s) * 1000) / 1000} ms`)
console.log(`    js: ${Math.round((Jt4e - Jt4s) * 1000) / 1000} ms`)
console.log(` js100: ${Math.round((Jt5e - Jt5s) * 1000) / 1000} ms`)
console.log(`    js: ${Math.round((Jt6e - Jt6s) * 1000) / 1000} ms`)
console.log(` js100: ${Math.round((Jt7e - Jt7s) * 1000) / 1000} ms`)
